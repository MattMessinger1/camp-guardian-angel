import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Copy, Check, User, AlertCircle } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";

interface ChildInfo {
  id: string;
  name: string;
  dob: string;
  notes?: string;
}

interface ParentInfo {
  id: string;
  name?: string;
  email?: string;
  phone?: string;
}

interface CopyChildInfoProps {
  sessionId: string;
  className?: string;
}

export function CopyChildInfo({ sessionId, className }: CopyChildInfoProps) {
  const { user } = useAuth();
  const [copied, setCopied] = useState(false);

  // Fetch children data
  const { data: children } = useQuery({
    queryKey: ["children-for-copy", user?.id],
    queryFn: async (): Promise<ChildInfo[]> => {
      if (!user) return [];
      
      const { data, error } = await supabase
        .from("children")
        .select("id, name, dob, notes")
        .eq("parent_id", user.id)
        .order("created_at", { ascending: false });
      
      if (error) {
        console.error("Error fetching children:", error);
        return [];
      }
      
      return data.map(child => ({
        id: child.id,
        name: child.name,
        dob: child.dob,
        notes: child.notes || undefined
      }));
    },
    enabled: Boolean(user)
  });

  // Fetch parent info
  const { data: parent } = useQuery({
    queryKey: ["parent-for-copy", user?.id],
    queryFn: async (): Promise<ParentInfo | null> => {
      if (!user) return null;
      
      const { data, error } = await supabase
        .from("parents")
        .select("id, name, email, phone")
        .eq("user_id", user.id)
        .single();
      
      if (error) {
        console.error("Error fetching parent info:", error);
        return null;
      }
      
      return {
        id: data.id,
        name: data.name || undefined,
        email: data.email || undefined,
        phone: data.phone || undefined
      };
    },
    enabled: Boolean(user)
  });

  const handleCopyInfo = async () => {
    if (!children?.length) {
      toast({
        title: "No child information",
        description: "Please add child information in your profile first.",
        variant: "destructive"
      });
      return;
    }

    const primaryChild = children[0]; // Use first/most recent child
    
    // Create guardian info with proper fallbacks
    const guardianInfo: ParentInfo = parent || {
      id: 'temp',
      name: user?.email?.split('@')[0] || 'Guardian',
      email: user?.email || '',
      phone: ''
    };

    // Calculate age from DOB
    const calculateAge = (dob: string) => {
      const birthDate = new Date(dob);
      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();
      const monthDiff = today.getMonth() - birthDate.getMonth();
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
      }
      return age;
    };

    // Format DOB for display
    const formatDOB = (dob: string) => {
      return new Date(dob).toLocaleDateString("en-US", {
        month: "2-digit",
        day: "2-digit", 
        year: "numeric"
      });
    };

    // JSON format for programmatic use
    const jsonData = {
      child: {
        firstName: primaryChild.name.split(' ')[0] || '',
        lastName: primaryChild.name.split(' ').slice(1).join(' ') || '',
        fullName: primaryChild.name,
        dateOfBirth: primaryChild.dob,
        age: calculateAge(primaryChild.dob),
        notes: primaryChild.notes || '',
        allergies: primaryChild.notes || '', // Assuming notes contain allergy info
      },
      guardian: {
        firstName: (guardianInfo.name || '').split(' ')[0] || '',
        lastName: (guardianInfo.name || '').split(' ').slice(1).join(' ') || '',
        fullName: guardianInfo.name || '',
        email: guardianInfo.email || user?.email || '',
        phone: guardianInfo.phone || '',
      },
      sessionId: sessionId,
      generatedAt: new Date().toISOString()
    };

    // Human-readable format for manual entry
    const textData = `CHILD INFORMATION:
Name: ${primaryChild.name}
Date of Birth: ${formatDOB(primaryChild.dob)} (Age: ${calculateAge(primaryChild.dob)})
${primaryChild.notes ? `Medical Notes/Allergies: ${primaryChild.notes}` : 'Medical Notes/Allergies: None specified'}

GUARDIAN INFORMATION:
Name: ${guardianInfo.name || 'Not specified'}
Email: ${guardianInfo.email || user?.email || 'Not specified'}
Phone: ${guardianInfo.phone || 'Not specified'}

Generated by CampRush on ${new Date().toLocaleDateString()}
Session ID: ${sessionId}`;

    // Combine both formats for clipboard
    const clipboardData = `JSON FORMAT (for developers/automated forms):
${JSON.stringify(jsonData, null, 2)}

HUMAN-READABLE FORMAT (for manual form filling):
${textData}`;

    try {
      await navigator.clipboard.writeText(clipboardData);
      setCopied(true);
      
      toast({
        title: "Information copied!",
        description: "Both JSON and text formats are now in your clipboard."
      });

      // Reset copied state after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy to clipboard:", error);
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard. Please try again.",
        variant: "destructive"
      });
    }
  };

  if (!user) {
    return null;
  }

  const hasChildInfo = children && children.length > 0;

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            onClick={handleCopyInfo}
            variant="outline"
            size="lg"
            className={className}
            disabled={!hasChildInfo}
          >
            {copied ? (
              <>
                <Check className="w-4 h-4 mr-2" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="w-4 h-4 mr-2" />
                Copy my child info
              </>
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent side="bottom" className="max-w-sm">
          <div className="space-y-2 text-sm">
            {hasChildInfo ? (
              <>
                <div className="font-medium flex items-center gap-2">
                  <User className="w-3 h-3" />
                  What gets copied:
                </div>
                <ul className="space-y-1 text-xs">
                  <li>• Child's name (first/last)</li>
                  <li>• Date of birth & calculated age</li>
                  <li>• Medical notes/allergies</li>
                  <li>• Guardian contact information</li>
                </ul>
                <div className="text-xs text-muted-foreground border-t pt-2">
                  <strong>Paste where:</strong> Registration forms asking for child details, emergency contacts, or medical information.
                </div>
              </>
            ) : (
              <div className="flex items-center gap-2 text-amber-600">
                <AlertCircle className="w-3 h-3" />
                <span>Add child information in your profile first</span>
              </div>
            )}
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}